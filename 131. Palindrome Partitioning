class Solution {
    public List<List<String>> partition(String s) {
        //1. call solve method by passing index=0,s,list,result
        //2. base condn: if index reaches s.length, add result to list, return
        //3. iterate from index to s.length (index will be less than i)
        //4. check palindrome(s,index,i)
        //5. add into list from index to i+1
        //6. call recusrsivly solve by i+1
        //7. backtacking
        List<List<String>> result = new ArrayList<List<String>>();
        List<String> list = new ArrayList<String>();
        int index=0;
        solve(index,s,list,result);
        return result;
    }
    public void solve(int index, String s, List<String> list, List<List<String>> result){
        if(index==s.length()){
            result.add(new ArrayList<>(list));
            return;
        }
        for(int i=index;i<s.length();i++){
            if(isPalindrome(s,index,i)){
                list.add(s.substring(index,i+1));
                solve(i+1,s,list,result);
                list.remove(list.size()-1);
            }
        }
    }
    public boolean isPalindrome(String s, int index, int i){
        String str1="";
        String str2="";
        for(int ind =index;ind<=i;ind++){
            str1+=s.charAt(ind);
        }
        for(int ind=i;ind>=index;ind--){
            str2+=s.charAt(ind);
        }
        if(str1.equals(str2)){
            return true;
        }
        else{
            return false;
        }
        
        
    }
}
