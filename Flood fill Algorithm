class Solution
{
    //check if image[startRow][startCol]==newColor, if it is return image
    //else store oldColor as image[startRow][startCol]
    //do dfs traversal 
    //check row & colum boundary and image[row][col]!=oldColor
    //color that position and do 4 recursive calls accordingly
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor){
        if(image[sr][sc]==newColor){
            return image;
        }
        int oldColor = image[sr][sc];
        
        
        change(image,sr,sc,newColor,oldColor);
        return image;
        
    }
    public void change(int[][] image, int row, int col, int newColor, int oldColor){
        if(row<0 || row>=image.length || col<0 || col >= image[0].length){
            
            return;
        }
        if(image[row][col]!=oldColor){
            return;
        }
        
        image[row][col]=newColor;
        change(image,row,col-1,newColor,oldColor);
        change(image,row,col+1,newColor,oldColor);
        change(image,row-1,col,newColor,oldColor);
        change(image,row+1,col,newColor,oldColor);
    }
}
