/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //Create a map containing <TreeNode,Integer>
    // Base case: if root is null, return 0
    //check for existence in map, if exist than return
    //check if root's left not null and root's right not null, than store the value of root.left.left, root.leftz.right and root.right.l, root.r.r
    //store in map by taking max(root's value+root.left.left, only root.lleft+root.rigth)
    Map<TreeNode,Integer> map =  new HashMap<TreeNode,Integer>();
    public int rob(TreeNode root) {
        
        if(root==null){
            return 0;
        }
        if(map.containsKey(root)){
            return map.get(root);
        }
        int val=0;
        if(root.left!=null){
            val+=rob(root.left.left)+rob(root.left.right);
        }
        if(root.right!=null){
            val+=rob(root.right.left)+rob(root.right.right);
        }
        map.put(root,Math.max(root.val+val,rob(root.left)+rob(root.right)));
        return map.get(root);
    }
    
   
}
