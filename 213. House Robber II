class Solution {
    // make two dp table of length nums length & nums length-1
    //start from 0 index in nums length -1
    //start from 1 index in nums length
    public int rob(int[] nums) {
        int first_length=nums.length-1;
        int last_length=nums.length;
        if(nums.length==0){
            return 0;
        }
        if(nums.length==1){
            return nums[0];
        }
        if(nums.length==2){
            return Math.max(nums[0],nums[1]);
        }
        int[] dp1 = new int[first_length];
        int[] dp2 = new int[last_length];
        dp1[0]=nums[0];
        dp1[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<dp1.length;i++){
            dp1[i]=Math.max(nums[i]+dp1[i-2],dp1[i-1]);
        }
        dp2[1]=nums[1];
        dp2[2]=Math.max(nums[1],nums[2]);
        for(int i=3;i<dp2.length;i++){
            dp2[i]=Math.max(nums[i]+dp2[i-2],dp2[i-1]);
        }
      
        return Math.max(dp1[dp1.length-1],dp2[dp2.length-1]);
    }
}
